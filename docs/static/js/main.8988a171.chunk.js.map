{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","find","x","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KA6BhD,OAEI,0BAAMC,SAtBW,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAIV,OAFcA,EAAKC,MAAK,SAAAC,GAAC,OAAIA,IAAMT,KAEjB,YAAIO,GAEhB,CAAEP,GAAR,mBAAuBO,OAG3BN,EAAc,OAQd,2BACIS,KAAK,OACLC,MAAQX,EACRY,SA/Bc,SAAET,GAExBF,EAAcE,EAAEU,OAAOF,Y,uBCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAE3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAmBZM,GAnBY,4CAAH,sDCCPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,yBAAKc,UAAU,8CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,+BAAMA,EAAN,OCLCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAfAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFC,QAAQC,IAAI,SAAUF,GACtBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAGGqB,EDnB0BO,CAAc5B,GAAlCa,EAHwB,EAG7BN,KAAaa,EAHgB,EAGhBA,QAIrB,OAFAM,QAAQC,IAAI,UAAWP,GAGnB,oCACI,wBAAIJ,UAAU,qCAAd,IAAoDhB,EAApD,KAEEoB,GAAW,uBAAGJ,UAAU,oCAAb,eAEb,yBAAKA,UAAU,aAKPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACImB,IAAKnB,EAAIC,IACLD,UEpBnBoB,EAAe,WAAM,MAGM9C,mBAAS,CAAC,cAHhB,mBAGvB+C,EAHuB,KAGXhD,EAHW,KAU9B,OACI,oCACI,6CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQgD,EAAWtB,KAAI,SAACT,GAAD,OACX,kBAAC,EAAD,CACI6B,IAAK7B,EACLA,SAAUA,U,MClBtCgC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.8988a171.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        // console.log('e.target.value: ', e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        \r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            \r\n            setCategories(cats => {\r\n                // Aquí verificas si existe la categoria.\r\n                const exist = cats.find(x => x === inputValue);\r\n                // Si existe, retornas las categorías ya existentes.\r\n                if (exist) return [...cats];\r\n \r\n                return [inputValue, ...cats];\r\n            });\r\n            \r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n                    \r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n        \r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n    // encodeURI() es una funcion para escapar los espacios\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=izZufBa9rdd0ZcqPT7nAP5rkhykaagIQ`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n            // El operador de encadenamiento opcional ?. Es por si no trae imagenes, que tire undefined en vez de error. \r\n            // (Documentacion)\r\n            // https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Optional_chaining\r\n        }\r\n    })\r\n\r\n    // console.log('gifs: ', gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    // console.log( id, title, url );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeft\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // renombro data:images como images\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    console.log('state: ', loading);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }      \r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    // https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\n                    // images.map(({id, title}) => ( // en vez de poner img y despues pasar img.id e img.title\r\n                    // <li key={ id }> { title } </li>\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        // Manda las propiedades del objeto img una a una, es como si mandáramos \r\n                        // id, title, url de forma independiente, y no el objeto img en si.\r\n                        // (Documentacion)\r\n                        // https://developer.mozilla.org/es/docs/conflicting/Web/JavaScript/Reference/Operators/Spread_syntax\r\n                        />\r\n                    ))\r\n\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // Codigo que ejecuta la funcion, solo una vez, cuando el componente se renderiza por primera vez.\r\n    useEffect(() => {\r\n        getGifs(category)// helper\r\n            .then(imgs => {\r\n\r\n                console.log('imgs: ', imgs);\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            });\r\n\r\n    }, [category]); // Si la categoria cambia se vuelve a disparar la peticion HTTP. En vacio el array solo lo hace 1 vez.\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //Hook useState nombre de la constante, funcion, datos iniciales\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //   // setCategories( ['El chavo', ...categories]);\r\n    //   setCategories( cats => [ ...cats, 'El Chavo']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category) =>\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}